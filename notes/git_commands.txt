# Check git version
-> get --version

# Check config list
->git config --list

 git config --global user.name "SAKHAWAT222"
 git config --global user.email "sakhawat.h.chowfhury22@gmail.com"
 ls -al ~/.ssh
 eval $(ssh-agent -s)
 ssh-keygen -t rsa -b 4096 -c "sakhawat.h.chowdhury22@gmail.com"
 ssh-keygen -t ed25519 -C "sakhawat.h.chowdhury22@gmail.com"
 $ ssh-add ~/.ssh/id_ed25519
 ssh-add -1
 $ ssh -T git@github.com




# Repositor Stages: 1.working directory/workspace 2.stagging area/index 3.local repository 4. Remote repository

# Create git folder
-> git init

# Remove Directory
->rm -rf test_repo

# Clone a git
-> git clone git@github.com:SAKHAWAT222/test_repo.git

# Open a file
-> echo "# test_repo" >> README.md
-> cat README.md


# Git staging 
-> git add file_name
-> git add -a [(a is shortand for -all) stage all changed file in directory and subdirectories]
-> git add . [stage all changed file directory but not subdirectories]
-> git add *.extension [directory wildcard]
-> git add **/*.extension [directory & subdirectory wildcard]
-> git diff [checking the diffreence]

# Git unstaging
-> git rm --cached <file>


# Git changes
-> git diff

# Git Status
-> git status

# Git restore
-> git restore <file>

# Git commit
-> git commit -m "Message here"

# Staging & comitting directly
-> git commit -am 'message'

# Git commit history
-> git log

# Push file in the remote repository
-> git push

# Check the name of cureent brunch 
-> git branch -a

# Enter a specific brunch
-> git checkout main

# Create a new brunch
-> git checkout -b master

# Set a brunch as top
-> git push --set-upstream origin master

# Dlete a brunch
-> git push origin --delete main

# Update your branch from remote brunch
-> git pull

# Update your branch from remote development brunch
-> git pull origin/development

# Merge your brunch with remote brunch
-> git merge development

# Track corrent location
-> pwd


# list of existing docs
-> ls -al

# clear screen
-> Ctrl+l


# Make directory
-> mkdir directory_name

# Remove directory
-> rmdir directory_name


# Enterted a directory 
-> cd development [# Fill full name press Tab key. "development" folder name.]


# Exit to main directory
-> cd ~


# Single step back from cureent directory.
-> cd ..


# Create a new file
-> touch note.txt [# "note.txt" write file name with extension.]

# Copy afile
-> cp *.txt notes


# Delete a file
-> rm note.txt [# "note.text" write file name with extension.]


# Delete all file with same extension.
-> rm *.text [# write only extension name]

# Create a public key
-> cat id_rsa.pub


# Need help?
-> git --help
-> git help <verb> [example: git help config]
-> git <verb> --help

usage: git [-v | --version] [-h | --help] [-C <path>] [-c <name>=<value>]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]
           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
           [--super-prefix=<path>] [--config-env=<name>=<envvar>]
           <command> [<args>]

These are common Git commands used in various situations:

start a working area (see also: git help tutorial)
   clone     Clone a repository into a new directory
   init      Create an empty Git repository or reinitialize an existing one

work on the current change (see also: git help everyday)
   add       Add file contents to the index
   mv        Move or rename a file, a directory, or a symlink
   restore   Restore working tree files
   rm        Remove files from the working tree and from the index

examine the history and state (see also: git help revisions)
   bisect    Use binary search to find the commit that introduced a bug
   diff      Show changes between commits, commit and working tree, etc
   grep      Print lines matching a pattern
   log       Show commit logs
   show      Show various types of objects
   status    Show the working tree status

grow, mark and tweak your common history
   branch    List, create, or delete branches
   commit    Record changes to the repository
   merge     Join two or more development histories together
   rebase    Reapply commits on top of another base tip
   reset     Reset current HEAD to the specified state
   switch    Switch branches
   tag       Create, list, delete or verify a tag object signed with GPG

collaborate (see also: git help workflows)
   fetch     Download objects and refs from another repository
   pull      Fetch from and integrate with another repository or a local branch
   push      Update remote refs along with associated objects

'git help -a' and 'git help -g' list available subcommands and some
concept guides. See 'git help <command>' or 'git help <concept>'
to read about a specific subcommand or concept.
See 'git help git' for an overview of the system.





usage: git add [<options>] [--] <pathspec>...

    -n, --dry-run         dry run
    -v, --verbose         be verbose

    -i, --interactive     interactive picking
    -p, --patch           select hunks interactively
    -e, --edit            edit current diff and apply
    -f, --force           allow adding otherwise ignored files
    -u, --update          update tracked files
    --renormalize         renormalize EOL of tracked files (implies -u)
    -N, --intent-to-add   record only the fact that the path will be added later
    -A, --all             add changes from all tracked and untracked files
    --ignore-removal      ignore paths removed in the working tree (same as --no-all)
    --refresh             don't add, only refresh the index
    --ignore-errors       just skip files which cannot be added because of errors
    --ignore-missing      check if - even missing - files are ignored in dry run
    --sparse              allow updating entries outside of the sparse-checkout cone
    --chmod (+|-)x        override the executable bit of the listed files
    --pathspec-from-file <file>
                          read pathspec from file
    --pathspec-file-nul   with --pathspec-from-file, pathspec elements are separated with NUL character